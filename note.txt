# Http建立连接的步骤

1. 建立TCP连接
在HTTP工作开始之前，Web浏览器首先要通过网络与Web服务器建立连接，该连接是通过TCP来完成的，
该协议与IP协议共同构建Internet，即著名的TCP/IP协议族，因此Internet又被称作是TCP/IP网络。
HTTP是比TCP更高层次的应用层协议，根据规则，只有低层协议建立之后才能，才能进行更层协议的连接，
因此，首先要建立TCP连接，一般TCP连接的端口号是80。

2. Web浏览器向Web服务器发送请求命令
一旦建立了TCP连接，Web浏览器就会向Web服务器发送请求命令。例如：GET/sample/hello.jsp HTTP/1.1。

3. Web浏览器发送请求头信息
浏览器发送其请求命令之后，还要以头信息的形式向Web服务器发送一些别的信息，之后浏览器发送了一空白行来通知服务器，它已经结束了该头信息的发送

4. Web服务器应答
客户机向服务器发出请求后，服务器会客户机回送应答， HTTP/1.1 200 OK ，应答的第一部分是协议的版本号和应答状态码。

5. Web服务器发送应答头信息
正如客户端会随同请求发送关于自身的信息一样，服务器也会随同应答向用户发送关于它自己的数据及被请求的文档。

6. Web服务器向浏览器发送数据
Web服务器向浏览器发送头信息后，它会发送一个空白行来表示头信息的发送到此为结束，接着，
它就以Content-Type应答头信息所描述的格式发送用户所请求的实际数据。

7. Web服务器关闭TCP连接
一般情况下，一旦Web服务器向浏览器发送了请求数据，它就要关闭TCP连接，然后如果浏览器或者服务器在其头信息加入了这行代码：
Connection:keep-alive
TCP连接在发送后将仍然保持打开状态，于是，浏览器可以继续通过相同的连接发送请求。
保持连接节省了为每个请求建立新连接所需的时间，还节约了网络带宽。

#####################################################################################################################

# Http的请求过程

我们在浏览器输入http://www.baidu.com想要进入百度首页，但是这是个域名，没法准确定位到服务器的位置，
所以需要通过域名解析，把域名解析成对应的ip地址，然后通过ip地址查找目的主机。整个访问过程可以概括为：

域名解析
发起TCP三次握手建立连接
建立连接后发起http请求
服务器响应请求，浏览器获取html源码
浏览器解析html代码，并请求相关css,js和图片资源
浏览器渲染页面

在浏览器输入一串域名要访问某网站的时候，浏览器帮我们做了如下事情（以Chrome浏览器和windows系统为例）：

Chrome浏览器首先检查自己本地是缓存是否有对应的域名，有则直接使用。【查看Chrome浏览器dns缓存地址：chrome://net-internals/#dns】
如果浏览器缓存中没有，则查询系统DNS缓存中的域名表，有则直接使用。【windows查看域名表的命令：ipconfig /displaydns】
系统缓存中还是没有，则检查hosts文件中的映射表。【windows中hosts文件路径：C:\Windows\System32\drivers\etc】
本地实在找不到，则向DNS域名服务器发起请求查询。【DNS服务器IP是本地配置的首选服务器，一般常用的有114.114.114.114（电信运营商提供）和8.8.8.8（Google提供）】
    DNS服务器首先查找自身的缓存，有对应的域名ip则返回结果
    如果缓存中查找不到，DNS服务器则发起迭代DNS请求，首先向根域服务器发起请求查询，假如本次请求的是www.baidu.com,根域服务器发现这是一个com的顶级域名，就把com域的ip地址返回给DNS服务器
    DNS服务器向com域ip地址发起请求，查询该域名的ip，此时该服务器返回了baidu.com的DNS地址。
    最后DNS服务器又向baidu.com的DNS地址发起查询请求，最后找到了完整的ip路径返回给DNS服务器，DNS再把ip信息返回给windows内核，内核再返回给浏览器，于是浏览器就知道该域名对应的ip地址了，可以开始进一步请求了。

每个域名用小数点分隔开变成多级，从右到左等级逐级递减，所以最右边的等级最高，每个域都有用一个域名服务器，管理则下属域名

建立TCP连接

第一次握手：客户端向服务器发送SYN报文，并发送客户端初始序列号Seq=X；等待服务器确认，

第二次握手：服务器接收客户端的SYN报文，然后向客户端返回一个包SYN+ACK响应报文，并发送初始序列号Seq=Y

第三次握手：客户端接受SYN+ACK报文，并向服务器发送一个ACK确认报文，至此连接建立

【建立连接的最重要目是让连接的双方交换初始序号(ISN, Initial Sequence Number)，所以再响应的ACK报文中会包含序列号递增序列】

#####################################################################################################################

# send、recv等socket编程接口的阻塞与非阻塞模式

socket编程中经常使用send和recv函数来接收和发送数据。
对于系统来说，不管是发送数据还是接收数据，都不是直接在内存上操作的。 发送数据有发送缓冲区，接收数据有接收缓冲区。

对于send来说，send函数调用时，先将将应用程序请求发送的数据拷贝到发送缓存中，而后驱动程序会去读取发送缓冲中的数据，在进行真正的传输。
对于recv来说，recv只是从接收缓冲中读取数据，而接收缓存中的数据来自于网卡驱动。

既然调用send和recv时，是与缓冲区进行交互，那么就至少可能存在以下问题：
1. 对send来说， 发送缓冲区的可用空间不足以拷贝要发送的数据怎么办，是阻塞等待、还是返回失败信息？
2. 对recv来说，接收缓冲区还没有数据可读怎么办， 是阻塞等到有数据，还是返回失败？

阻塞 与 非阻塞
在阻塞模式下，send调用在发送缓冲区可用空间不足时，会阻塞等待； recv调用在接收缓冲区还没有数据可读时，也会阻塞等待。
在非阻塞模式下，send调用在发送缓冲区可用空间不足时，会返回失败； recv调用在接收缓冲区还没有数据可读时，也会返回失败。

默认情况下，send、recv等socket编程接口工作在阻塞模式下。
也就是说，当程序执行到recv时，如果对方数据还没发出来、或者说还没到达我们的接收缓冲区，程序就阻塞在recv了。


#####################################################################################################################

Https的流程和原理

使用https需要在服务器上配置https证书，证书可以自己生成，也可以向专门的https证书机构购买，这两者的区别是自己生成的证书不会被浏览器信任
访问时会提示不安全的网站，需要点击信任后才可以继续访问

https原理

保证客户端与服务器之间的安全传输，就必须要加密传输，首先要解决的问题就是加密方式：
    1、对称加密
    2、非对称加密

无论选择对称加密还是非对称加密，都要面临一个问题：密钥如何传递？

如果选择对称加密，客户端和服务端使用的是相同密钥，在连接建立时，密钥在传递过程中如果遭到劫持，第三方获取到了密钥，就可以在客户端和服务器之间截听
加密数据，通过密钥解密数据之后进行篡改，并利用密钥对篡改后的数据进行加密返回给发送方，整个过程客户端和服务器并不知道数据被截听了，
看来只使用对称加密无法解决客户端与服务器之间的安全传输

如果选择非对称加密，服务器生成密钥对，将公钥发送给客户端。在连接建立时，第三方截获了公钥，他可以用公钥解密由服务器端传来的数据，但是没有办法
解密客户端发送出来的数据，因为没有私钥是无法解密的，只有服务器才能解密，因而无法得到客户端的加密内容。但是这样就可以保证客户端与服务器端
之间的安全传输了吗？并不行，首先，服务器端返回数据的安全无法保证，其次，第三方如果充当了中间人的角色，同样会导致安全传输失败

在连接建立时，中间人截取了公钥A之后，生成新的密钥对B，并将公钥B发送给客户端，自己持有私钥B，客户端没有办法知道公钥是由服务器发送的公钥A还是由
中间人创建的公钥B，在加密数据时，使用公钥B进行加密数据，加密后的数据被中间人截听，并利用手中的私钥B进行解密，获得原始数据，进行篡改之后，
再利用公钥A进行加密，传输给服务器。服务器并没有察觉到异样，但整个会话其实已经被篡改了。这样的攻击方式就叫做中间人攻击

这样就引入了证书的概念，证书是由专门的证书颁发机构颁发的包含服务器地址等信息的证书，可以简单的理解为有机构背书的密钥对。这样在中间人替换密钥对的时候，
由于中间人的密钥对是没有通过机构认证的，因此客户端就会发出警告，提示证书并不可信。

当然，服务器可以找机构申请证书，那么中间人同样可以申请，申请之后，你我之间同样是机构认证过的，这样问题又回到了原点。正是考虑到了这点，证书
不仅包含了密钥对，同样还包含了服务器的企业信息，域名等独一无二的东西（还有证书内容的摘要及生成摘要的方法，用hash算法获得的内容摘要）。
证书机构将这些内容用机构的私钥进行加密，生成证书传给服务器，再由服务器传给客户端。

那么客户端收到证书之后，怎么解密证书中的公钥呢？还是靠网络传输吗？不是的，证书机构与系统及浏览器合作，将公钥已经内嵌在浏览器或系统之中了，
因此可以利用内嵌的证书机构公钥进行解密。这样中间人可以解密证书，获取证书内的公钥A，却不能再利用自己生成的公钥B合成证书（没有机构私钥），这样
中间人就不可能去仿造服务器的证书了，如果中间人利用自己申请的证书，客户端就算收到了中间人申请的证书，发现和请求的域名无法匹配，也能知道连接
受到了监听。

https访问流程

1、客户端向服务器发起请求：client Hello
    其中内容包含：
    1、支持的协议版本，如TLS1.0，TLS1.1
    2、客户端生成的随机数Random，用于生成对话的“对话密钥”
    3、支持的加密算法
    4、支持的压缩算法

2、服务器收到请求，然后响应：server Hello
    其中内容包含：
    1、确认使用的加密通信版本，比如TLS1.1，如果浏览器不支持，服务器关闭加密通信
    2、服务器生成的随机数random2，用于生成对话的”对话密钥“
    3、确认使用的加密方法，比如RSA公钥加密
    4、服务器证书

3、客户端收到证书后开始验证
    验证方式：
    1、证书里的签名算法字段sha256RSA表示，CA机构使用sha256对证书进行摘要，然后用RSA算法对对摘要进行私钥加密。
    2、如果是从正规机构购买的证书，公钥一般都内置在系统中了，浏览器用内置的公钥进行解密，得到证书内容摘要及摘要方法，再用sha256对证书
    内容进行摘要，如果摘要值一致，则说明证书没有被修改。
    3、通过验证，浏览器会显示安全字样，没通过验证，就会显示不安全的提示。

4、生成随机数
    通过验证后，客户端会随机生成一个pre-master secret，然后使用证书中的公钥进行加密，传给服务器。
